//
//  ListUserGithubInteractorTests.swift
//  Github Fetch Data
//
//  Created by daniel on 14/04/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Github_Fetch_Data
import XCTest

class ListUserGithubInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListUserGithubInteractor!
    
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListUserGithubInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListUserGithubInteractor()
    {
        sut = ListUserGithubInteractor()
    }
    
    // MARK: Test doubles
    
    class ListUserGithubPresentationLogicSpy: ListUserGithubPresentationLogic
    {
        var presentSomethingCalled = false
        var presentFetchedUserCalled = false
        
        func presentSomething(response: ListUserGithub.Something.Response)
        {
            presentSomethingCalled = true
        }
        
        func presentUsers(response: ListUserGithub.FetchUser.Response) {
            presentFetchedUserCalled = true
        }
    }
    
    class WorkerSpy: ListUserGithubWorker
    {
        var fetchUserCalled = false
        var expectedRequest: ListUserGithub.FetchUser.Request?
        
        override func fetchUsers(request: ListUserGithub.FetchUser.Request, completionHandler: @escaping ([Users]) -> Void) {
            super.fetchUsers(request: request, completionHandler: completionHandler)
            fetchUserCalled = true
            expectedRequest = request
        }
    }
    
    // MARK: Tests
    
    func testFetchedUserListShouldCalledPresenter()
    {
        // Given
        let presentSpy = ListUserGithubPresentationLogicSpy()
        sut.presenter = presentSpy
        let workerSpy = WorkerSpy()
        sut.worker = workerSpy
        
        // When
        let request = ListUserGithub.FetchUser.Request()
        sut.fetchUser(request: request)
        
        //Then
        XCTAssert(workerSpy.fetchUserCalled, "interactor should call fetch user")
        //XCTAssert(presentSpy.presentFetchedUserCalled, "interactor should ask presenter to format result")
        
    }
}
